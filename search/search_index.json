{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction Create a spotify client or spotify-connect device using Golang! Gospotlib is a reimplementation of Librespot in Go and aims to provide a structured codebase with clear dependencies. Difference with librespot-golang The golang port by librespot-org ( Librespot-golang ) is lacking spotify-connect features and has several unnecessary and outdated dependencies, making the codebase harder to understand. That does not mean the library is no good, it has - in fact - been used as reference several times whilst writing this port. However, due to the heavy reimplementation, a fork would've been too far fetched. Getting started Get started inspecting and running one of the examples below. See the packages page to get an overview of available packages / API's examples/authentication_discovery Advertise as Spotify-Connect device on the network and authenticate to Spotify when someone connects Project status Below is a list of currently implemented features. Missing a feature you'd like to see? Open an issue or create a pull-request Spotify-connect discovery server Spotify-connect discovery client Secure connection with authentication Mercury (PUB/SUB) client Metadata client SPIRC controller Encrypted audio streaming","title":"Introduction"},{"location":"#introduction","text":"Create a spotify client or spotify-connect device using Golang! Gospotlib is a reimplementation of Librespot in Go and aims to provide a structured codebase with clear dependencies. Difference with librespot-golang The golang port by librespot-org ( Librespot-golang ) is lacking spotify-connect features and has several unnecessary and outdated dependencies, making the codebase harder to understand. That does not mean the library is no good, it has - in fact - been used as reference several times whilst writing this port. However, due to the heavy reimplementation, a fork would've been too far fetched.","title":"Introduction"},{"location":"#getting-started","text":"Get started inspecting and running one of the examples below. See the packages page to get an overview of available packages / API's examples/authentication_discovery Advertise as Spotify-Connect device on the network and authenticate to Spotify when someone connects","title":"Getting started"},{"location":"#project-status","text":"Below is a list of currently implemented features. Missing a feature you'd like to see? Open an issue or create a pull-request Spotify-connect discovery server Spotify-connect discovery client Secure connection with authentication Mercury (PUB/SUB) client Metadata client SPIRC controller Encrypted audio streaming","title":"Project status"},{"location":"packages/","text":"Packages Packages that are to be used by third-parties (like you) reside in the pkg folder. Internal packages like cryptography and protobuffers reside in the internal folder. An overview of public packages features in this library Info Reference the Spotify Overview to get an idea what each service provides. Warning This page describes spotify services and features. That does not mean these are all - already - implemented in this library. Connection The connection is the backbone of almost all services - discovery excluded - and is used to send and receive packets which can contain metadata, playback information, remote control commands and encrypted audio stream. On creation the Connection connects to a random spotify server, performs handshaking and key negotiation and lastly authenticates with the given credentials. Credentials can be created from things like username/password and OAuth or are provided by the Discovery server. All packet communication on the connection is asynchronous and in no particular order, therefore the connection must be read from constantly and interested parties must register themselves as command handlers (packets are prefixed with a command byte). Discovery The discovery service is used to advertise as a Spotify-Connect device on the network, or to find Spotify-Connect devices on the network. Spotify clients will provide credentials when connecting to Spotify-Connect devices. These devices then use these credentials to login and start streaming music. When connecting... When a spotify clients connects to a Spotify-Connect device, it expects that device to start broadcasting its device and playback state, which tells the spotify client that the device is now the active spotify client. As you may remember you can only stream music on one device, that is the 'active' device. Broadcasting and tracking this state is done by the SPIRC controller Mercury client Mercury is a Spotify Publish/Subscribe protocol. It is used to request metadata server and communicate with other spotify clients. Metadata client The metadata client uses a mercury connection to search and fetch all kinds of metadata ranging from tracks and podcasts to copyright information. Spirc controller The SPIRC Controller is used to communicate with other spotify-clients authenticated as the same user or connected to the same Spotify-Connect device. It is responsible for providing device and playback state (like the current song) and for processing commands (like skip song ). Audio stream Danger Do not attempt to use the audiostream to pirate songs. We do not endorse pirating music and will not provide any help in that effort. The audiostream is responsible for requesting encrypted audio chunks and decrypting them.","title":"Packages"},{"location":"packages/#packages","text":"Packages that are to be used by third-parties (like you) reside in the pkg folder. Internal packages like cryptography and protobuffers reside in the internal folder. An overview of public packages features in this library Info Reference the Spotify Overview to get an idea what each service provides. Warning This page describes spotify services and features. That does not mean these are all - already - implemented in this library.","title":"Packages"},{"location":"packages/#connection","text":"The connection is the backbone of almost all services - discovery excluded - and is used to send and receive packets which can contain metadata, playback information, remote control commands and encrypted audio stream. On creation the Connection connects to a random spotify server, performs handshaking and key negotiation and lastly authenticates with the given credentials. Credentials can be created from things like username/password and OAuth or are provided by the Discovery server. All packet communication on the connection is asynchronous and in no particular order, therefore the connection must be read from constantly and interested parties must register themselves as command handlers (packets are prefixed with a command byte).","title":"Connection"},{"location":"packages/#discovery","text":"The discovery service is used to advertise as a Spotify-Connect device on the network, or to find Spotify-Connect devices on the network. Spotify clients will provide credentials when connecting to Spotify-Connect devices. These devices then use these credentials to login and start streaming music. When connecting... When a spotify clients connects to a Spotify-Connect device, it expects that device to start broadcasting its device and playback state, which tells the spotify client that the device is now the active spotify client. As you may remember you can only stream music on one device, that is the 'active' device. Broadcasting and tracking this state is done by the SPIRC controller","title":"Discovery"},{"location":"packages/#mercury-client","text":"Mercury is a Spotify Publish/Subscribe protocol. It is used to request metadata server and communicate with other spotify clients.","title":"Mercury client"},{"location":"packages/#metadata-client","text":"The metadata client uses a mercury connection to search and fetch all kinds of metadata ranging from tracks and podcasts to copyright information.","title":"Metadata client"},{"location":"packages/#spirc-controller","text":"The SPIRC Controller is used to communicate with other spotify-clients authenticated as the same user or connected to the same Spotify-Connect device. It is responsible for providing device and playback state (like the current song) and for processing commands (like skip song ).","title":"Spirc controller"},{"location":"packages/#audio-stream","text":"Danger Do not attempt to use the audiostream to pirate songs. We do not endorse pirating music and will not provide any help in that effort. The audiostream is responsible for requesting encrypted audio chunks and decrypting them.","title":"Audio stream"},{"location":"contributing/development/","text":"Development Tooling This project uses Magefile to simplify some tasks: use mage docs to spin up a mkdocs server at http://localhost:8000 use mage proto to compile all proto files in internal/proto use mage clean to remove all compiled proto files from pkg/pb","title":"Development"},{"location":"contributing/development/#development","text":"","title":"Development"},{"location":"contributing/development/#tooling","text":"This project uses Magefile to simplify some tasks: use mage docs to spin up a mkdocs server at http://localhost:8000 use mage proto to compile all proto files in internal/proto use mage clean to remove all compiled proto files from pkg/pb","title":"Tooling"},{"location":"spotify/overview/","text":"Spotify overview This page attempts to summarize spotify terminology/features/services, for more detailed explanation and functioning see the associated pages. Secure connection Every connection with the spotify servers use a TCP connection framed messages (packets). Packets usually consist of some metadata followed by packet length and marshalled protobuffer. TCP Connect to a random AP from apresolve.spotify.com Negotiate keys (using Diffie-Hellman) and start using Shannon encrypted packets Login using some credentials Mercury The Mercury protocol provides a more dynamic communication between the Spotify server and client for transferring documents. The Mercury request/replies are URI based and contain metadata as headers, such as caching-policy and status-codes. The Mercury service is used for: Performing searches, returns tracks, albums, artist, podcasts, etc... Everything you'd see in your Spotify app; requesting specific metadata such as: track information, artist biography, copyright, restrictions, etc...; providing publish/subscribe messaging to spotify-clients authenticated as the same user (see SPIRC ) Metadata Metadata such as: searching, tracks, albums, artist, copyright and more are provided over the Mercury protocol in asynchronous request/response format. SPIRC SPIRC is used by Spotify clients (authenticated as the same user) to communicate with eachother, like providing device and playback state. When you open Spotify on another device you'll notice a greenbar indicating that spotify is currently playing on another device. Your client used SPIRC to broadcast a hello-message, to which your other client responds with its state; in this case indicating that it is the active (currently playing) device. SPIRC and Spotify-Connect devices When you're connected to a Spotify-Connect device - such as a speaker or television - that device is now logged in as you and therefore broadcasts and processes SPIRC messages. This is how another device is controlled. The Mercury service provides a publish/subscribe channel with your active Spotify client. SPIRC is used for: Broadcasting playback information (current song, playlist, queue) to your other spotify clients; controlling other spotify clients by sending commands such as: pause, skip song, change playlist, queue something; Audio stream The audiostream is used to start streaming audio from the spotify server. The stream is divided into encrypted chunks. The audiostream requests each chunk and decrypts its contents, which can then be used by an audio-backend to play the audio through the speakers. Discovery Discovery is the process of finding Spotify-Connect devices on the network and providing login credentials. Spotify-Connect Devices are advertised using mDNS/ZeroConf/Bonjour. Each device exposes a small HTTP server which is used to get extra information about the device and to authenticate with the device. When a client connects to a device, it will provide login credentials through the HTTP server. The device then authenticates with the Spotify network and start broadcasting its state through SPIRC .","title":"Spotify overview"},{"location":"spotify/overview/#spotify-overview","text":"This page attempts to summarize spotify terminology/features/services, for more detailed explanation and functioning see the associated pages.","title":"Spotify overview"},{"location":"spotify/overview/#secure-connection","text":"Every connection with the spotify servers use a TCP connection framed messages (packets). Packets usually consist of some metadata followed by packet length and marshalled protobuffer. TCP Connect to a random AP from apresolve.spotify.com Negotiate keys (using Diffie-Hellman) and start using Shannon encrypted packets Login using some credentials","title":"Secure connection"},{"location":"spotify/overview/#mercury","text":"The Mercury protocol provides a more dynamic communication between the Spotify server and client for transferring documents. The Mercury request/replies are URI based and contain metadata as headers, such as caching-policy and status-codes. The Mercury service is used for: Performing searches, returns tracks, albums, artist, podcasts, etc... Everything you'd see in your Spotify app; requesting specific metadata such as: track information, artist biography, copyright, restrictions, etc...; providing publish/subscribe messaging to spotify-clients authenticated as the same user (see SPIRC )","title":"Mercury"},{"location":"spotify/overview/#metadata","text":"Metadata such as: searching, tracks, albums, artist, copyright and more are provided over the Mercury protocol in asynchronous request/response format.","title":"Metadata"},{"location":"spotify/overview/#spirc","text":"SPIRC is used by Spotify clients (authenticated as the same user) to communicate with eachother, like providing device and playback state. When you open Spotify on another device you'll notice a greenbar indicating that spotify is currently playing on another device. Your client used SPIRC to broadcast a hello-message, to which your other client responds with its state; in this case indicating that it is the active (currently playing) device. SPIRC and Spotify-Connect devices When you're connected to a Spotify-Connect device - such as a speaker or television - that device is now logged in as you and therefore broadcasts and processes SPIRC messages. This is how another device is controlled. The Mercury service provides a publish/subscribe channel with your active Spotify client. SPIRC is used for: Broadcasting playback information (current song, playlist, queue) to your other spotify clients; controlling other spotify clients by sending commands such as: pause, skip song, change playlist, queue something;","title":"SPIRC"},{"location":"spotify/overview/#audio-stream","text":"The audiostream is used to start streaming audio from the spotify server. The stream is divided into encrypted chunks. The audiostream requests each chunk and decrypts its contents, which can then be used by an audio-backend to play the audio through the speakers.","title":"Audio stream"},{"location":"spotify/overview/#discovery","text":"Discovery is the process of finding Spotify-Connect devices on the network and providing login credentials. Spotify-Connect Devices are advertised using mDNS/ZeroConf/Bonjour. Each device exposes a small HTTP server which is used to get extra information about the device and to authenticate with the device. When a client connects to a device, it will provide login credentials through the HTTP server. The device then authenticates with the Spotify network and start broadcasting its state through SPIRC .","title":"Discovery"}]}