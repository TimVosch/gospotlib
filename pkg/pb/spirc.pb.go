// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.20.0
// source: spirc.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MessageType int32

const (
	MessageType_kMessageTypeHello          MessageType = 1
	MessageType_kMessageTypeGoodbye        MessageType = 2
	MessageType_kMessageTypeProbe          MessageType = 3
	MessageType_kMessageTypeNotify         MessageType = 10
	MessageType_kMessageTypeLoad           MessageType = 20
	MessageType_kMessageTypePlay           MessageType = 21
	MessageType_kMessageTypePause          MessageType = 22
	MessageType_kMessageTypePlayPause      MessageType = 23
	MessageType_kMessageTypeSeek           MessageType = 24
	MessageType_kMessageTypePrev           MessageType = 25
	MessageType_kMessageTypeNext           MessageType = 26
	MessageType_kMessageTypeVolume         MessageType = 27
	MessageType_kMessageTypeShuffle        MessageType = 28
	MessageType_kMessageTypeRepeat         MessageType = 29
	MessageType_kMessageTypeVolumeDown     MessageType = 31
	MessageType_kMessageTypeVolumeUp       MessageType = 32
	MessageType_kMessageTypeReplace        MessageType = 33
	MessageType_kMessageTypeLogout         MessageType = 34
	MessageType_kMessageTypeAction         MessageType = 35
	MessageType_kMessageTypeRename         MessageType = 36
	MessageType_kMessageTypeUpdateMetadata MessageType = 128
)

// Enum value maps for MessageType.
var (
	MessageType_name = map[int32]string{
		1:   "kMessageTypeHello",
		2:   "kMessageTypeGoodbye",
		3:   "kMessageTypeProbe",
		10:  "kMessageTypeNotify",
		20:  "kMessageTypeLoad",
		21:  "kMessageTypePlay",
		22:  "kMessageTypePause",
		23:  "kMessageTypePlayPause",
		24:  "kMessageTypeSeek",
		25:  "kMessageTypePrev",
		26:  "kMessageTypeNext",
		27:  "kMessageTypeVolume",
		28:  "kMessageTypeShuffle",
		29:  "kMessageTypeRepeat",
		31:  "kMessageTypeVolumeDown",
		32:  "kMessageTypeVolumeUp",
		33:  "kMessageTypeReplace",
		34:  "kMessageTypeLogout",
		35:  "kMessageTypeAction",
		36:  "kMessageTypeRename",
		128: "kMessageTypeUpdateMetadata",
	}
	MessageType_value = map[string]int32{
		"kMessageTypeHello":          1,
		"kMessageTypeGoodbye":        2,
		"kMessageTypeProbe":          3,
		"kMessageTypeNotify":         10,
		"kMessageTypeLoad":           20,
		"kMessageTypePlay":           21,
		"kMessageTypePause":          22,
		"kMessageTypePlayPause":      23,
		"kMessageTypeSeek":           24,
		"kMessageTypePrev":           25,
		"kMessageTypeNext":           26,
		"kMessageTypeVolume":         27,
		"kMessageTypeShuffle":        28,
		"kMessageTypeRepeat":         29,
		"kMessageTypeVolumeDown":     31,
		"kMessageTypeVolumeUp":       32,
		"kMessageTypeReplace":        33,
		"kMessageTypeLogout":         34,
		"kMessageTypeAction":         35,
		"kMessageTypeRename":         36,
		"kMessageTypeUpdateMetadata": 128,
	}
)

func (x MessageType) Enum() *MessageType {
	p := new(MessageType)
	*p = x
	return p
}

func (x MessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_spirc_proto_enumTypes[0].Descriptor()
}

func (MessageType) Type() protoreflect.EnumType {
	return &file_spirc_proto_enumTypes[0]
}

func (x MessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *MessageType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = MessageType(num)
	return nil
}

// Deprecated: Use MessageType.Descriptor instead.
func (MessageType) EnumDescriptor() ([]byte, []int) {
	return file_spirc_proto_rawDescGZIP(), []int{0}
}

type CapabilityType int32

const (
	CapabilityType_kSupportedContexts  CapabilityType = 1
	CapabilityType_kCanBePlayer        CapabilityType = 2
	CapabilityType_kRestrictToLocal    CapabilityType = 3
	CapabilityType_kDeviceType         CapabilityType = 4
	CapabilityType_kGaiaEqConnectId    CapabilityType = 5
	CapabilityType_kSupportsLogout     CapabilityType = 6
	CapabilityType_kIsObservable       CapabilityType = 7
	CapabilityType_kVolumeSteps        CapabilityType = 8
	CapabilityType_kSupportedTypes     CapabilityType = 9
	CapabilityType_kCommandAcks        CapabilityType = 10
	CapabilityType_kSupportsRename     CapabilityType = 11
	CapabilityType_kHidden             CapabilityType = 12
	CapabilityType_kSupportsPlaylistV2 CapabilityType = 13
	CapabilityType_kUnknown            CapabilityType = 14
)

// Enum value maps for CapabilityType.
var (
	CapabilityType_name = map[int32]string{
		1:  "kSupportedContexts",
		2:  "kCanBePlayer",
		3:  "kRestrictToLocal",
		4:  "kDeviceType",
		5:  "kGaiaEqConnectId",
		6:  "kSupportsLogout",
		7:  "kIsObservable",
		8:  "kVolumeSteps",
		9:  "kSupportedTypes",
		10: "kCommandAcks",
		11: "kSupportsRename",
		12: "kHidden",
		13: "kSupportsPlaylistV2",
		14: "kUnknown",
	}
	CapabilityType_value = map[string]int32{
		"kSupportedContexts":  1,
		"kCanBePlayer":        2,
		"kRestrictToLocal":    3,
		"kDeviceType":         4,
		"kGaiaEqConnectId":    5,
		"kSupportsLogout":     6,
		"kIsObservable":       7,
		"kVolumeSteps":        8,
		"kSupportedTypes":     9,
		"kCommandAcks":        10,
		"kSupportsRename":     11,
		"kHidden":             12,
		"kSupportsPlaylistV2": 13,
		"kUnknown":            14,
	}
)

func (x CapabilityType) Enum() *CapabilityType {
	p := new(CapabilityType)
	*p = x
	return p
}

func (x CapabilityType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CapabilityType) Descriptor() protoreflect.EnumDescriptor {
	return file_spirc_proto_enumTypes[1].Descriptor()
}

func (CapabilityType) Type() protoreflect.EnumType {
	return &file_spirc_proto_enumTypes[1]
}

func (x CapabilityType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CapabilityType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CapabilityType(num)
	return nil
}

// Deprecated: Use CapabilityType.Descriptor instead.
func (CapabilityType) EnumDescriptor() ([]byte, []int) {
	return file_spirc_proto_rawDescGZIP(), []int{1}
}

type PlayStatus int32

const (
	PlayStatus_kPlayStatusStop    PlayStatus = 0
	PlayStatus_kPlayStatusPlay    PlayStatus = 1
	PlayStatus_kPlayStatusPause   PlayStatus = 2
	PlayStatus_kPlayStatusLoading PlayStatus = 3
)

// Enum value maps for PlayStatus.
var (
	PlayStatus_name = map[int32]string{
		0: "kPlayStatusStop",
		1: "kPlayStatusPlay",
		2: "kPlayStatusPause",
		3: "kPlayStatusLoading",
	}
	PlayStatus_value = map[string]int32{
		"kPlayStatusStop":    0,
		"kPlayStatusPlay":    1,
		"kPlayStatusPause":   2,
		"kPlayStatusLoading": 3,
	}
)

func (x PlayStatus) Enum() *PlayStatus {
	p := new(PlayStatus)
	*p = x
	return p
}

func (x PlayStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PlayStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_spirc_proto_enumTypes[2].Descriptor()
}

func (PlayStatus) Type() protoreflect.EnumType {
	return &file_spirc_proto_enumTypes[2]
}

func (x PlayStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *PlayStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = PlayStatus(num)
	return nil
}

// Deprecated: Use PlayStatus.Descriptor instead.
func (PlayStatus) EnumDescriptor() ([]byte, []int) {
	return file_spirc_proto_rawDescGZIP(), []int{2}
}

type Frame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version            *uint32      `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	Ident              *string      `protobuf:"bytes,2,opt,name=ident" json:"ident,omitempty"`
	ProtocolVersion    *string      `protobuf:"bytes,3,opt,name=protocol_version,json=protocolVersion" json:"protocol_version,omitempty"`
	SeqNr              *uint32      `protobuf:"varint,4,opt,name=seq_nr,json=seqNr" json:"seq_nr,omitempty"`
	Typ                *MessageType `protobuf:"varint,5,opt,name=typ,enum=pb.MessageType" json:"typ,omitempty"`
	DeviceState        *DeviceState `protobuf:"bytes,7,opt,name=device_state,json=deviceState" json:"device_state,omitempty"`
	Goodbye            *Goodbye     `protobuf:"bytes,11,opt,name=goodbye" json:"goodbye,omitempty"`
	State              *State       `protobuf:"bytes,12,opt,name=state" json:"state,omitempty"`
	Position           *uint32      `protobuf:"varint,13,opt,name=position" json:"position,omitempty"`
	Volume             *uint32      `protobuf:"varint,14,opt,name=volume" json:"volume,omitempty"`
	StateUpdateId      *int64       `protobuf:"varint,17,opt,name=state_update_id,json=stateUpdateId" json:"state_update_id,omitempty"`
	Recipient          []string     `protobuf:"bytes,18,rep,name=recipient" json:"recipient,omitempty"`
	ContextPlayerState []byte       `protobuf:"bytes,19,opt,name=context_player_state,json=contextPlayerState" json:"context_player_state,omitempty"`
	NewName            *string      `protobuf:"bytes,20,opt,name=new_name,json=newName" json:"new_name,omitempty"`
	Metadata           *Metadata    `protobuf:"bytes,25,opt,name=metadata" json:"metadata,omitempty"`
}

func (x *Frame) Reset() {
	*x = Frame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spirc_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Frame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Frame) ProtoMessage() {}

func (x *Frame) ProtoReflect() protoreflect.Message {
	mi := &file_spirc_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Frame.ProtoReflect.Descriptor instead.
func (*Frame) Descriptor() ([]byte, []int) {
	return file_spirc_proto_rawDescGZIP(), []int{0}
}

func (x *Frame) GetVersion() uint32 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

func (x *Frame) GetIdent() string {
	if x != nil && x.Ident != nil {
		return *x.Ident
	}
	return ""
}

func (x *Frame) GetProtocolVersion() string {
	if x != nil && x.ProtocolVersion != nil {
		return *x.ProtocolVersion
	}
	return ""
}

func (x *Frame) GetSeqNr() uint32 {
	if x != nil && x.SeqNr != nil {
		return *x.SeqNr
	}
	return 0
}

func (x *Frame) GetTyp() MessageType {
	if x != nil && x.Typ != nil {
		return *x.Typ
	}
	return MessageType_kMessageTypeHello
}

func (x *Frame) GetDeviceState() *DeviceState {
	if x != nil {
		return x.DeviceState
	}
	return nil
}

func (x *Frame) GetGoodbye() *Goodbye {
	if x != nil {
		return x.Goodbye
	}
	return nil
}

func (x *Frame) GetState() *State {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *Frame) GetPosition() uint32 {
	if x != nil && x.Position != nil {
		return *x.Position
	}
	return 0
}

func (x *Frame) GetVolume() uint32 {
	if x != nil && x.Volume != nil {
		return *x.Volume
	}
	return 0
}

func (x *Frame) GetStateUpdateId() int64 {
	if x != nil && x.StateUpdateId != nil {
		return *x.StateUpdateId
	}
	return 0
}

func (x *Frame) GetRecipient() []string {
	if x != nil {
		return x.Recipient
	}
	return nil
}

func (x *Frame) GetContextPlayerState() []byte {
	if x != nil {
		return x.ContextPlayerState
	}
	return nil
}

func (x *Frame) GetNewName() string {
	if x != nil && x.NewName != nil {
		return *x.NewName
	}
	return ""
}

func (x *Frame) GetMetadata() *Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type DeviceState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SwVersion          *string       `protobuf:"bytes,1,opt,name=sw_version,json=swVersion" json:"sw_version,omitempty"`
	IsActive           *bool         `protobuf:"varint,10,opt,name=is_active,json=isActive" json:"is_active,omitempty"`
	CanPlay            *bool         `protobuf:"varint,11,opt,name=can_play,json=canPlay" json:"can_play,omitempty"`
	Volume             *uint32       `protobuf:"varint,12,opt,name=volume" json:"volume,omitempty"`
	Name               *string       `protobuf:"bytes,13,opt,name=name" json:"name,omitempty"`
	ErrorCode          *uint32       `protobuf:"varint,14,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	BecameActiveAt     *int64        `protobuf:"varint,15,opt,name=became_active_at,json=becameActiveAt" json:"became_active_at,omitempty"`
	ErrorMessage       *string       `protobuf:"bytes,16,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
	Capabilities       []*Capability `protobuf:"bytes,17,rep,name=capabilities" json:"capabilities,omitempty"`
	ContextPlayerError *string       `protobuf:"bytes,20,opt,name=context_player_error,json=contextPlayerError" json:"context_player_error,omitempty"`
	Metadata           []*Metadata   `protobuf:"bytes,25,rep,name=metadata" json:"metadata,omitempty"`
}

func (x *DeviceState) Reset() {
	*x = DeviceState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spirc_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceState) ProtoMessage() {}

func (x *DeviceState) ProtoReflect() protoreflect.Message {
	mi := &file_spirc_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceState.ProtoReflect.Descriptor instead.
func (*DeviceState) Descriptor() ([]byte, []int) {
	return file_spirc_proto_rawDescGZIP(), []int{1}
}

func (x *DeviceState) GetSwVersion() string {
	if x != nil && x.SwVersion != nil {
		return *x.SwVersion
	}
	return ""
}

func (x *DeviceState) GetIsActive() bool {
	if x != nil && x.IsActive != nil {
		return *x.IsActive
	}
	return false
}

func (x *DeviceState) GetCanPlay() bool {
	if x != nil && x.CanPlay != nil {
		return *x.CanPlay
	}
	return false
}

func (x *DeviceState) GetVolume() uint32 {
	if x != nil && x.Volume != nil {
		return *x.Volume
	}
	return 0
}

func (x *DeviceState) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *DeviceState) GetErrorCode() uint32 {
	if x != nil && x.ErrorCode != nil {
		return *x.ErrorCode
	}
	return 0
}

func (x *DeviceState) GetBecameActiveAt() int64 {
	if x != nil && x.BecameActiveAt != nil {
		return *x.BecameActiveAt
	}
	return 0
}

func (x *DeviceState) GetErrorMessage() string {
	if x != nil && x.ErrorMessage != nil {
		return *x.ErrorMessage
	}
	return ""
}

func (x *DeviceState) GetCapabilities() []*Capability {
	if x != nil {
		return x.Capabilities
	}
	return nil
}

func (x *DeviceState) GetContextPlayerError() string {
	if x != nil && x.ContextPlayerError != nil {
		return *x.ContextPlayerError
	}
	return ""
}

func (x *DeviceState) GetMetadata() []*Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type Capability struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Typ         *CapabilityType `protobuf:"varint,1,opt,name=typ,enum=pb.CapabilityType" json:"typ,omitempty"`
	IntValue    []int64         `protobuf:"varint,2,rep,name=intValue" json:"intValue,omitempty"`
	StringValue []string        `protobuf:"bytes,3,rep,name=stringValue" json:"stringValue,omitempty"`
}

func (x *Capability) Reset() {
	*x = Capability{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spirc_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Capability) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Capability) ProtoMessage() {}

func (x *Capability) ProtoReflect() protoreflect.Message {
	mi := &file_spirc_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Capability.ProtoReflect.Descriptor instead.
func (*Capability) Descriptor() ([]byte, []int) {
	return file_spirc_proto_rawDescGZIP(), []int{2}
}

func (x *Capability) GetTyp() CapabilityType {
	if x != nil && x.Typ != nil {
		return *x.Typ
	}
	return CapabilityType_kSupportedContexts
}

func (x *Capability) GetIntValue() []int64 {
	if x != nil {
		return x.IntValue
	}
	return nil
}

func (x *Capability) GetStringValue() []string {
	if x != nil {
		return x.StringValue
	}
	return nil
}

type Goodbye struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reason *string `protobuf:"bytes,1,opt,name=reason" json:"reason,omitempty"`
}

func (x *Goodbye) Reset() {
	*x = Goodbye{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spirc_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Goodbye) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Goodbye) ProtoMessage() {}

func (x *Goodbye) ProtoReflect() protoreflect.Message {
	mi := &file_spirc_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Goodbye.ProtoReflect.Descriptor instead.
func (*Goodbye) Descriptor() ([]byte, []int) {
	return file_spirc_proto_rawDescGZIP(), []int{3}
}

func (x *Goodbye) GetReason() string {
	if x != nil && x.Reason != nil {
		return *x.Reason
	}
	return ""
}

type State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContextUri          *string     `protobuf:"bytes,2,opt,name=context_uri,json=contextUri" json:"context_uri,omitempty"`
	Index               *uint32     `protobuf:"varint,3,opt,name=index" json:"index,omitempty"`
	PositionMs          *uint32     `protobuf:"varint,4,opt,name=position_ms,json=positionMs" json:"position_ms,omitempty"`
	Status              *PlayStatus `protobuf:"varint,5,opt,name=status,enum=pb.PlayStatus" json:"status,omitempty"`
	PositionMeasuredAt  *uint64     `protobuf:"varint,7,opt,name=position_measured_at,json=positionMeasuredAt" json:"position_measured_at,omitempty"`
	ContextDescription  *string     `protobuf:"bytes,8,opt,name=context_description,json=contextDescription" json:"context_description,omitempty"`
	Shuffle             *bool       `protobuf:"varint,13,opt,name=shuffle" json:"shuffle,omitempty"`
	Repeat              *bool       `protobuf:"varint,14,opt,name=repeat" json:"repeat,omitempty"`
	LastCommandIdent    *string     `protobuf:"bytes,20,opt,name=last_command_ident,json=lastCommandIdent" json:"last_command_ident,omitempty"`
	LastCommandMsgid    *uint32     `protobuf:"varint,21,opt,name=last_command_msgid,json=lastCommandMsgid" json:"last_command_msgid,omitempty"`
	PlayingFromFallback *bool       `protobuf:"varint,24,opt,name=playing_from_fallback,json=playingFromFallback" json:"playing_from_fallback,omitempty"`
	Row                 *uint32     `protobuf:"varint,25,opt,name=row" json:"row,omitempty"`
	PlayingTrackIndex   *uint32     `protobuf:"varint,26,opt,name=playing_track_index,json=playingTrackIndex" json:"playing_track_index,omitempty"`
	Track               []*TrackRef `protobuf:"bytes,27,rep,name=track" json:"track,omitempty"`
	Ad                  *Ad         `protobuf:"bytes,28,opt,name=ad" json:"ad,omitempty"`
}

func (x *State) Reset() {
	*x = State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spirc_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*State) ProtoMessage() {}

func (x *State) ProtoReflect() protoreflect.Message {
	mi := &file_spirc_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use State.ProtoReflect.Descriptor instead.
func (*State) Descriptor() ([]byte, []int) {
	return file_spirc_proto_rawDescGZIP(), []int{4}
}

func (x *State) GetContextUri() string {
	if x != nil && x.ContextUri != nil {
		return *x.ContextUri
	}
	return ""
}

func (x *State) GetIndex() uint32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

func (x *State) GetPositionMs() uint32 {
	if x != nil && x.PositionMs != nil {
		return *x.PositionMs
	}
	return 0
}

func (x *State) GetStatus() PlayStatus {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return PlayStatus_kPlayStatusStop
}

func (x *State) GetPositionMeasuredAt() uint64 {
	if x != nil && x.PositionMeasuredAt != nil {
		return *x.PositionMeasuredAt
	}
	return 0
}

func (x *State) GetContextDescription() string {
	if x != nil && x.ContextDescription != nil {
		return *x.ContextDescription
	}
	return ""
}

func (x *State) GetShuffle() bool {
	if x != nil && x.Shuffle != nil {
		return *x.Shuffle
	}
	return false
}

func (x *State) GetRepeat() bool {
	if x != nil && x.Repeat != nil {
		return *x.Repeat
	}
	return false
}

func (x *State) GetLastCommandIdent() string {
	if x != nil && x.LastCommandIdent != nil {
		return *x.LastCommandIdent
	}
	return ""
}

func (x *State) GetLastCommandMsgid() uint32 {
	if x != nil && x.LastCommandMsgid != nil {
		return *x.LastCommandMsgid
	}
	return 0
}

func (x *State) GetPlayingFromFallback() bool {
	if x != nil && x.PlayingFromFallback != nil {
		return *x.PlayingFromFallback
	}
	return false
}

func (x *State) GetRow() uint32 {
	if x != nil && x.Row != nil {
		return *x.Row
	}
	return 0
}

func (x *State) GetPlayingTrackIndex() uint32 {
	if x != nil && x.PlayingTrackIndex != nil {
		return *x.PlayingTrackIndex
	}
	return 0
}

func (x *State) GetTrack() []*TrackRef {
	if x != nil {
		return x.Track
	}
	return nil
}

func (x *State) GetAd() *Ad {
	if x != nil {
		return x.Ad
	}
	return nil
}

type TrackRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gid     []byte  `protobuf:"bytes,1,opt,name=gid" json:"gid,omitempty"`
	Uri     *string `protobuf:"bytes,2,opt,name=uri" json:"uri,omitempty"`
	Queued  *bool   `protobuf:"varint,3,opt,name=queued" json:"queued,omitempty"`
	Context *string `protobuf:"bytes,4,opt,name=context" json:"context,omitempty"`
}

func (x *TrackRef) Reset() {
	*x = TrackRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spirc_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrackRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackRef) ProtoMessage() {}

func (x *TrackRef) ProtoReflect() protoreflect.Message {
	mi := &file_spirc_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackRef.ProtoReflect.Descriptor instead.
func (*TrackRef) Descriptor() ([]byte, []int) {
	return file_spirc_proto_rawDescGZIP(), []int{5}
}

func (x *TrackRef) GetGid() []byte {
	if x != nil {
		return x.Gid
	}
	return nil
}

func (x *TrackRef) GetUri() string {
	if x != nil && x.Uri != nil {
		return *x.Uri
	}
	return ""
}

func (x *TrackRef) GetQueued() bool {
	if x != nil && x.Queued != nil {
		return *x.Queued
	}
	return false
}

func (x *TrackRef) GetContext() string {
	if x != nil && x.Context != nil {
		return *x.Context
	}
	return ""
}

type Ad struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Next          *int32  `protobuf:"varint,1,opt,name=next" json:"next,omitempty"`
	OggFid        []byte  `protobuf:"bytes,2,opt,name=ogg_fid,json=oggFid" json:"ogg_fid,omitempty"`
	ImageFid      []byte  `protobuf:"bytes,3,opt,name=image_fid,json=imageFid" json:"image_fid,omitempty"`
	Duration      *int32  `protobuf:"varint,4,opt,name=duration" json:"duration,omitempty"`
	ClickUrl      *string `protobuf:"bytes,5,opt,name=click_url,json=clickUrl" json:"click_url,omitempty"`
	ImpressionUrl *string `protobuf:"bytes,6,opt,name=impression_url,json=impressionUrl" json:"impression_url,omitempty"`
	Product       *string `protobuf:"bytes,7,opt,name=product" json:"product,omitempty"`
	Advertiser    *string `protobuf:"bytes,8,opt,name=advertiser" json:"advertiser,omitempty"`
	Gid           []byte  `protobuf:"bytes,9,opt,name=gid" json:"gid,omitempty"`
}

func (x *Ad) Reset() {
	*x = Ad{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spirc_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ad) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ad) ProtoMessage() {}

func (x *Ad) ProtoReflect() protoreflect.Message {
	mi := &file_spirc_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ad.ProtoReflect.Descriptor instead.
func (*Ad) Descriptor() ([]byte, []int) {
	return file_spirc_proto_rawDescGZIP(), []int{6}
}

func (x *Ad) GetNext() int32 {
	if x != nil && x.Next != nil {
		return *x.Next
	}
	return 0
}

func (x *Ad) GetOggFid() []byte {
	if x != nil {
		return x.OggFid
	}
	return nil
}

func (x *Ad) GetImageFid() []byte {
	if x != nil {
		return x.ImageFid
	}
	return nil
}

func (x *Ad) GetDuration() int32 {
	if x != nil && x.Duration != nil {
		return *x.Duration
	}
	return 0
}

func (x *Ad) GetClickUrl() string {
	if x != nil && x.ClickUrl != nil {
		return *x.ClickUrl
	}
	return ""
}

func (x *Ad) GetImpressionUrl() string {
	if x != nil && x.ImpressionUrl != nil {
		return *x.ImpressionUrl
	}
	return ""
}

func (x *Ad) GetProduct() string {
	if x != nil && x.Product != nil {
		return *x.Product
	}
	return ""
}

func (x *Ad) GetAdvertiser() string {
	if x != nil && x.Advertiser != nil {
		return *x.Advertiser
	}
	return ""
}

func (x *Ad) GetGid() []byte {
	if x != nil {
		return x.Gid
	}
	return nil
}

type Metadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type     *string `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	Metadata *string `protobuf:"bytes,2,opt,name=metadata" json:"metadata,omitempty"`
}

func (x *Metadata) Reset() {
	*x = Metadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spirc_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metadata) ProtoMessage() {}

func (x *Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_spirc_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metadata.ProtoReflect.Descriptor instead.
func (*Metadata) Descriptor() ([]byte, []int) {
	return file_spirc_proto_rawDescGZIP(), []int{7}
}

func (x *Metadata) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *Metadata) GetMetadata() string {
	if x != nil && x.Metadata != nil {
		return *x.Metadata
	}
	return ""
}

var File_spirc_proto protoreflect.FileDescriptor

var file_spirc_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x73, 0x70, 0x69, 0x72, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x70,
	0x62, 0x22, 0x89, 0x04, 0x0a, 0x05, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x65, 0x71, 0x5f, 0x6e, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x65, 0x71, 0x4e, 0x72, 0x12, 0x21, 0x0a,
	0x03, 0x74, 0x79, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x03, 0x74, 0x79, 0x70,
	0x12, 0x32, 0x0a, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x07, 0x67, 0x6f, 0x6f, 0x64, 0x62, 0x79, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x62,
	0x79, 0x65, 0x52, 0x07, 0x67, 0x6f, 0x6f, 0x64, 0x62, 0x79, 0x65, 0x12, 0x1f, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x70, 0x62, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x12, 0x26, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x69,
	0x70, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x12, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x63,
	0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x65, 0x77, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x77, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x8e, 0x03,
	0x0a, 0x0b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x77, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x77, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09,
	0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x61, 0x6e,
	0x5f, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x63, 0x61, 0x6e,
	0x50, 0x6c, 0x61, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x28, 0x0a, 0x10, 0x62, 0x65, 0x63, 0x61, 0x6d, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x5f, 0x61, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x62, 0x65, 0x63, 0x61, 0x6d,
	0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x41, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x32,
	0x0a, 0x0c, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x11,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x28, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x70,
	0x0a, 0x0a, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x24, 0x0a, 0x03,
	0x74, 0x79, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x70, 0x62, 0x2e, 0x43,
	0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x03, 0x74,
	0x79, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x03, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x21, 0x0a, 0x07, 0x47, 0x6f, 0x6f, 0x64, 0x62, 0x79, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x22, 0xaa, 0x04, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x55, 0x72, 0x69, 0x12, 0x14,
	0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x12, 0x26, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x30, 0x0a,
	0x14, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x2f, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x68, 0x75, 0x66, 0x66, 0x6c, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x73, 0x68, 0x75, 0x66, 0x66, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x70, 0x65, 0x61, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x70, 0x65,
	0x61, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x6c, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x12, 0x2c, 0x0a, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x5f, 0x6d, 0x73, 0x67, 0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6c, 0x61,
	0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x4d, 0x73, 0x67, 0x69, 0x64, 0x12, 0x32,
	0x0a, 0x15, 0x70, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x66,
	0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x70,
	0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x46, 0x72, 0x6f, 0x6d, 0x46, 0x61, 0x6c, 0x6c, 0x62, 0x61,
	0x63, 0x6b, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x6f, 0x77, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x03, 0x72, 0x6f, 0x77, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x5f,
	0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x11, 0x70, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x22, 0x0a, 0x05, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x18, 0x1b, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x52, 0x65,
	0x66, 0x52, 0x05, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x12, 0x16, 0x0a, 0x02, 0x61, 0x64, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x64, 0x52, 0x02, 0x61, 0x64,
	0x22, 0x60, 0x0a, 0x08, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x66, 0x12, 0x10, 0x0a, 0x03,
	0x67, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x67, 0x69, 0x64, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x69,
	0x12, 0x16, 0x0a, 0x06, 0x71, 0x75, 0x65, 0x75, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x71, 0x75, 0x65, 0x75, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x22, 0xfa, 0x01, 0x0a, 0x02, 0x41, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x65, 0x78,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x12, 0x17, 0x0a,
	0x07, 0x6f, 0x67, 0x67, 0x5f, 0x66, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06,
	0x6f, 0x67, 0x67, 0x46, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f,
	0x66, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x46, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x55, 0x72, 0x6c, 0x12, 0x25, 0x0a, 0x0e,
	0x69, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x55, 0x72, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x1e, 0x0a,
	0x0a, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x72, 0x12, 0x10, 0x0a,
	0x03, 0x67, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x67, 0x69, 0x64, 0x22,
	0x3a, 0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2a, 0x8d, 0x04, 0x0a, 0x0b,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x6b,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x48, 0x65, 0x6c, 0x6c, 0x6f,
	0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x62, 0x79, 0x65, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x6b,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x65,
	0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x10, 0x0a, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x10, 0x14,
	0x12, 0x14, 0x0a, 0x10, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x50, 0x6c, 0x61, 0x79, 0x10, 0x15, 0x12, 0x15, 0x0a, 0x11, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x50, 0x61, 0x75, 0x73, 0x65, 0x10, 0x16, 0x12, 0x19, 0x0a,
	0x15, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x50, 0x6c, 0x61,
	0x79, 0x50, 0x61, 0x75, 0x73, 0x65, 0x10, 0x17, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x53, 0x65, 0x65, 0x6b, 0x10, 0x18, 0x12, 0x14,
	0x0a, 0x10, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72,
	0x65, 0x76, 0x10, 0x19, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x4e, 0x65, 0x78, 0x74, 0x10, 0x1a, 0x12, 0x16, 0x0a, 0x12, 0x6b, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x10, 0x1b, 0x12, 0x17, 0x0a, 0x13, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x53, 0x68, 0x75, 0x66, 0x66, 0x6c, 0x65, 0x10, 0x1c, 0x12, 0x16, 0x0a, 0x12, 0x6b,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x70, 0x65, 0x61,
	0x74, 0x10, 0x1d, 0x12, 0x1a, 0x0a, 0x16, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x10, 0x1f, 0x12,
	0x18, 0x0a, 0x14, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x55, 0x70, 0x10, 0x20, 0x12, 0x17, 0x0a, 0x13, 0x6b, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x10, 0x21, 0x12, 0x16, 0x0a, 0x12, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x10, 0x22, 0x12, 0x16, 0x0a, 0x12, 0x6b, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x10, 0x23, 0x12, 0x16, 0x0a, 0x12, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x10, 0x24, 0x12, 0x1f, 0x0a, 0x1a, 0x6b, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x10, 0x80, 0x01, 0x2a, 0xa1, 0x02, 0x0a, 0x0e,
	0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16,
	0x0a, 0x12, 0x6b, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x73, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x6b, 0x43, 0x61, 0x6e, 0x42, 0x65,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x52, 0x65, 0x73,
	0x74, 0x72, 0x69, 0x63, 0x74, 0x54, 0x6f, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x10, 0x03, 0x12, 0x0f,
	0x0a, 0x0b, 0x6b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x10, 0x04, 0x12,
	0x14, 0x0a, 0x10, 0x6b, 0x47, 0x61, 0x69, 0x61, 0x45, 0x71, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x49, 0x64, 0x10, 0x05, 0x12, 0x13, 0x0a, 0x0f, 0x6b, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x73, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x10, 0x06, 0x12, 0x11, 0x0a, 0x0d, 0x6b, 0x49,
	0x73, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x10, 0x07, 0x12, 0x10, 0x0a,
	0x0c, 0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x74, 0x65, 0x70, 0x73, 0x10, 0x08, 0x12,
	0x13, 0x0a, 0x0f, 0x6b, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x10, 0x09, 0x12, 0x10, 0x0a, 0x0c, 0x6b, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x41, 0x63, 0x6b, 0x73, 0x10, 0x0a, 0x12, 0x13, 0x0a, 0x0f, 0x6b, 0x53, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x73, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x10, 0x0b, 0x12, 0x0b, 0x0a, 0x07, 0x6b,
	0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x10, 0x0c, 0x12, 0x17, 0x0a, 0x13, 0x6b, 0x53, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x56, 0x32, 0x10,
	0x0d, 0x12, 0x0c, 0x0a, 0x08, 0x6b, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x0e, 0x2a,
	0x64, 0x0a, 0x0a, 0x50, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x13, 0x0a,
	0x0f, 0x6b, 0x50, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x74, 0x6f, 0x70,
	0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x6b, 0x50, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x50, 0x6c, 0x61, 0x79, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x50, 0x6c, 0x61, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x61, 0x75, 0x73, 0x65, 0x10, 0x02, 0x12, 0x16, 0x0a,
	0x12, 0x6b, 0x50, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4c, 0x6f, 0x61, 0x64,
	0x69, 0x6e, 0x67, 0x10, 0x03, 0x42, 0x26, 0x5a, 0x24, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x69, 0x6d, 0x76, 0x6f, 0x73, 0x63, 0x68, 0x2f, 0x67, 0x6f, 0x73,
	0x70, 0x6f, 0x74, 0x6c, 0x69, 0x62, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x62,
}

var (
	file_spirc_proto_rawDescOnce sync.Once
	file_spirc_proto_rawDescData = file_spirc_proto_rawDesc
)

func file_spirc_proto_rawDescGZIP() []byte {
	file_spirc_proto_rawDescOnce.Do(func() {
		file_spirc_proto_rawDescData = protoimpl.X.CompressGZIP(file_spirc_proto_rawDescData)
	})
	return file_spirc_proto_rawDescData
}

var file_spirc_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_spirc_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_spirc_proto_goTypes = []interface{}{
	(MessageType)(0),    // 0: pb.MessageType
	(CapabilityType)(0), // 1: pb.CapabilityType
	(PlayStatus)(0),     // 2: pb.PlayStatus
	(*Frame)(nil),       // 3: pb.Frame
	(*DeviceState)(nil), // 4: pb.DeviceState
	(*Capability)(nil),  // 5: pb.Capability
	(*Goodbye)(nil),     // 6: pb.Goodbye
	(*State)(nil),       // 7: pb.State
	(*TrackRef)(nil),    // 8: pb.TrackRef
	(*Ad)(nil),          // 9: pb.Ad
	(*Metadata)(nil),    // 10: pb.Metadata
}
var file_spirc_proto_depIdxs = []int32{
	0,  // 0: pb.Frame.typ:type_name -> pb.MessageType
	4,  // 1: pb.Frame.device_state:type_name -> pb.DeviceState
	6,  // 2: pb.Frame.goodbye:type_name -> pb.Goodbye
	7,  // 3: pb.Frame.state:type_name -> pb.State
	10, // 4: pb.Frame.metadata:type_name -> pb.Metadata
	5,  // 5: pb.DeviceState.capabilities:type_name -> pb.Capability
	10, // 6: pb.DeviceState.metadata:type_name -> pb.Metadata
	1,  // 7: pb.Capability.typ:type_name -> pb.CapabilityType
	2,  // 8: pb.State.status:type_name -> pb.PlayStatus
	8,  // 9: pb.State.track:type_name -> pb.TrackRef
	9,  // 10: pb.State.ad:type_name -> pb.Ad
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_spirc_proto_init() }
func file_spirc_proto_init() {
	if File_spirc_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_spirc_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Frame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spirc_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spirc_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Capability); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spirc_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Goodbye); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spirc_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spirc_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrackRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spirc_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ad); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spirc_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Metadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_spirc_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_spirc_proto_goTypes,
		DependencyIndexes: file_spirc_proto_depIdxs,
		EnumInfos:         file_spirc_proto_enumTypes,
		MessageInfos:      file_spirc_proto_msgTypes,
	}.Build()
	File_spirc_proto = out.File
	file_spirc_proto_rawDesc = nil
	file_spirc_proto_goTypes = nil
	file_spirc_proto_depIdxs = nil
}
